{"version":3,"sources":["components/Timeline.js","components/Citation.js","App.js","serviceWorker.js","index.js"],"names":["changeExpand","curIndex","prevState","setExpandStatus","cleanState","TimelineElements","props","elementList","expanded","dataPoint","push","onTimelineElementClick","stateObject","className","contentStyle","background","color","contentArrowStyle","borderRight","date","data","iconClassName","dateClassName","iconStyle","title","description","Timeline","initializeState","useState","OpenCitation","open","style","href","Citation","setOpen","onClick","handleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8afc6295.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { VerticalTimeline, VerticalTimelineElement } from 'react-vertical-timeline-component';\nimport 'react-vertical-timeline-component/style.min.css';\nimport data from '../data.json'\n\nfunction changeExpand(curIndex, prevState, setExpandStatus, cleanState) {\n    if (prevState[curIndex] === 0) {\n        setExpandStatus({ ...cleanState, [curIndex]: 1 })\n    }\n    else {\n        setExpandStatus({ ...cleanState, [curIndex]: 0 })\n    }\n\n}\n\n\nfunction TimelineElements(props) {\n    let elementList = []\n    const expanded = props.expanded\n\n    for (const dataPoint in data) {\n        elementList.push(\n            (expanded[dataPoint] === 0) ?\n                <VerticalTimelineElement onTimelineElementClick={() => props.changeExpand(dataPoint, expanded, props.setExpandStatus, props.stateObject)}\n                    className=\"vertical-timeline-element--work\"\n                    contentStyle={{ background: 'rgb(0, 0, 0)', color: '#fff' }}\n                    contentArrowStyle={{ borderRight: '7px solid  rgb(0, 0, 0)' }}\n                    date={data[dataPoint].date}\n                    iconClassName=\"timeline-icon-size\"\n                    dateClassName=\"bigdate\"\n                    iconStyle={{ background: 'rgb(0, 0, 0)', color: '#fff' }}\n                >\n                    <h3 className=\"vertical-timeline-element-title\">{data[dataPoint].title}</h3>\n                </VerticalTimelineElement>\n                :\n                <VerticalTimelineElement onTimelineElementClick={() => props.changeExpand(dataPoint, expanded, props.setExpandStatus, props.stateObject)}\n                    className=\"vertical-timeline-element--work\"\n                    contentStyle={{ background: 'rgb(0, 0, 0)', color: '#fff' }}\n                    contentArrowStyle={{ borderRight: '7px solid  rgb(0, 0, 0)' }}\n                    date={data[dataPoint].date}\n                    iconClassName=\"timeline-icon-size\"\n                    iconStyle={{ background: 'rgb(0, 0, 0)', color: '#fff' }}\n                >\n                    <h3 className=\"vertical-timeline-element-title\">{data[dataPoint].title}</h3>\n                    <p>\n                        {data[dataPoint].description}\n                    </p>\n                </VerticalTimelineElement>\n        )\n    }\n    return elementList\n}\n\nfunction initializeState() {\n    let stateObject = {}\n    for (const dataPoint in data) {\n        stateObject[dataPoint] = 0\n    }\n    return stateObject\n}\n\nconst Timeline = () => {\n    const stateObject = initializeState()\n    const [expanded, setExpandStatus] = useState(stateObject)\n    \n    return (\n        <div>\n            <VerticalTimeline>\n                <TimelineElements expanded={expanded} changeExpand={changeExpand} stateObject={stateObject} setExpandStatus={setExpandStatus} />\n                <VerticalTimelineElement\n                    iconClassName=\"timeline-icon-size\"\n                    iconStyle={{ background: 'rgb(16, 204, 82)', color: '#fff' }}\n                />\n            </VerticalTimeline>\n\n        </div>\n    );\n}\n\nexport default Timeline;\n","import React, { useState } from 'react';\n\n\nfunction handleClick(open, setOpen) {\n    if (open===0) {\n        setOpen(1)\n    }\n    else {\n        setOpen(0)\n    }\n}\n\nfunction OpenCitation(props) {\n    if (props.open===0) {\n        return (\n            <div>\n\n            </div>\n        )\n    }\n    else {\n        return (            \n            <div className=\"citation\">\n                <br></br>\n                Article Title<br></br>\n                Black History Milestones: Timeline\n                <br></br>\n                Author<br></br>\n                History.com Editors\n                <br></br>\n                Website Name<br></br>\n                HISTORY\n                <br></br>\n                URL<br></br>\n                <a style={{color:\"white\"}} href=\"https://www.history.com/topics/black-history/black-history-milestones\">\n                https://www.history.com/topics/black-history/black-history-milestones\n                </a>\n                <br></br>\n                Access Date<br></br>\n                June 15, 2020\n                <br></br>\n                Publisher<br></br>\n                A&E Television Networks\n                <br></br>\n                Last Updated<br></br>\n                June 6, 2020\n                <br></br>\n                Original Published Date<br></br>\n                October 14, 2009\n            </div>\n        )\n    }\n}\n\nconst Citation = () => {\n    const [open, setOpen] = useState(0)\n    return (\n        <div>\n            <center>\n                <label style={{ color: \"white\" }} onClick={() => handleClick(open, setOpen)}>Citation</label>\n                <OpenCitation open={open} />\n            </center>\n        </div>\n    );\n}\n\nexport default Citation;","import React from 'react';\nimport Timeline from \"./components/Timeline\"\nimport Citation from \"./components/Citation\"\nfunction App() {\n  return (\n    <div className=\"App\">\n      <center>\n        <h1 style={{color:\"white\"}}>A timeline of black history</h1>\n      </center>\n      <Timeline />\n      <Citation/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}